# types are written like this:
# a variable is an element of the set of types, like here
# args is in set of Arrays and Strings.
# `in` seems to be a better syntax than `<-`
main (args in Array^String) =
  let newlist = ((map inc) args)
  (print newlist)

concat (1st-str, str_2 in String, num in Integer^OtherCategory)

inc (x) :: x <- Number =
  = ((plus x) 1)

inc (str <- String)
  = (toStr (inc (toNum str)))

# Lists are homogeneous,
# Sets are not.
# Tuples are like tuples in Haskell
print (list) :: list - list of Base =
  let head = (head list),
      rest = (init list)
  (conc [(toStr head), newline, (print list)])

